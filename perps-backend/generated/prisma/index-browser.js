
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  publicKey: 'publicKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketScalarFieldEnum = {
  id: 'id',
  assetSymbol: 'assetSymbol',
  marketAddress: 'marketAddress',
  baseAssetReserve: 'baseAssetReserve',
  quoteAssetReserve: 'quoteAssetReserve',
  fundingRate: 'fundingRate',
  lastFundingTs: 'lastFundingTs',
  totalLongSize: 'totalLongSize',
  totalShortSize: 'totalShortSize',
  maxLeverage: 'maxLeverage',
  minMarginRatioBps: 'minMarginRatioBps',
  feeBps: 'feeBps',
  isActive: 'isActive',
  minPositionSize: 'minPositionSize',
  maxPriceImpactBps: 'maxPriceImpactBps',
  kFactor: 'kFactor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  positionAddress: 'positionAddress',
  userId: 'userId',
  marketId: 'marketId',
  isLong: 'isLong',
  size: 'size',
  entryPrice: 'entryPrice',
  collateral: 'collateral',
  leverage: 'leverage',
  openedAt: 'openedAt',
  lastFundingTs: 'lastFundingTs',
  realizedPnlFromFunding: 'realizedPnlFromFunding',
  liquidationPrice: 'liquidationPrice',
  isClosed: 'isClosed',
  closedAt: 'closedAt',
  closingPrice: 'closingPrice',
  realizedPnl: 'realizedPnl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  marketId: 'marketId',
  orderType: 'orderType',
  isLong: 'isLong',
  size: 'size',
  price: 'price',
  collateral: 'collateral',
  leverage: 'leverage',
  isActive: 'isActive',
  maxSlippageBps: 'maxSlippageBps',
  createdAt: 'createdAt',
  positionId: 'positionId',
  executionPrice: 'executionPrice',
  executedAt: 'executedAt',
  cancelledAt: 'cancelledAt',
  txHash: 'txHash',
  lastError: 'lastError'
};

exports.Prisma.TradeScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  positionId: 'positionId',
  userId: 'userId',
  marketId: 'marketId',
  side: 'side',
  size: 'size',
  price: 'price',
  fee: 'fee',
  txHash: 'txHash',
  createdAt: 'createdAt'
};

exports.Prisma.FundingPaymentScalarFieldEnum = {
  id: 'id',
  marketId: 'marketId',
  positionId: 'positionId',
  amount: 'amount',
  rate: 'rate',
  timestamp: 'timestamp',
  txHash: 'txHash',
  createdAt: 'createdAt'
};

exports.Prisma.LiquidationScalarFieldEnum = {
  id: 'id',
  positionId: 'positionId',
  liquidator: 'liquidator',
  liquidationPrice: 'liquidationPrice',
  collateralReturned: 'collateralReturned',
  fee: 'fee',
  txHash: 'txHash',
  timestamp: 'timestamp',
  createdAt: 'createdAt',
  marketId: 'marketId'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  marketId: 'marketId',
  markPrice: 'markPrice',
  indexPrice: 'indexPrice',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.SystemHealthScalarFieldEnum = {
  id: 'id',
  component: 'component',
  status: 'status',
  metrics: 'metrics',
  timestamp: 'timestamp'
};

exports.Prisma.LiquidationAttemptScalarFieldEnum = {
  id: 'id',
  positionId: 'positionId',
  marketId: 'marketId',
  timestamp: 'timestamp',
  currentPrice: 'currentPrice',
  liquidationPrice: 'liquidationPrice',
  status: 'status'
};

exports.Prisma.FundingSettlementScalarFieldEnum = {
  id: 'id',
  marketId: 'marketId',
  timestamp: 'timestamp',
  rate: 'rate',
  totalAmount: 'totalAmount',
  longAmount: 'longAmount',
  shortAmount: 'shortAmount',
  positionCount: 'positionCount'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.OrderSide = exports.$Enums.OrderSide = {
  LONG: 'LONG',
  SHORT: 'SHORT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Market: 'Market',
  Position: 'Position',
  Order: 'Order',
  Trade: 'Trade',
  FundingPayment: 'FundingPayment',
  Liquidation: 'Liquidation',
  PriceHistory: 'PriceHistory',
  SystemHealth: 'SystemHealth',
  LiquidationAttempt: 'LiquidationAttempt',
  FundingSettlement: 'FundingSettlement'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
